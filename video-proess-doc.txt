https://medium.com/nerd-for-tech/writing-a-video-encoder-using-node-js-and-ffmpeg-b909442472a9
https://medium.com/@ayushnandanwar003/video-transcoding-in-node-js-saving-videos-in-multiple-resolutions-0ad8e6217d8c
https://stackoverflow.com/questions/30842316/video-to-audio-file-convert-save-through-ffmpeg-in-node-js?rq=4
this code video chunk in every 10s code working 
const express = require('express');
const app = express();
const port = 9999;
const axios = require('axios');
const fs = require('fs');
const path = require('path');
const ffmpegStatic = require('ffmpeg-static');
const ffmpeg = require('fluent-ffmpeg');

// Set the path to the ffmpeg binary
ffmpeg.setFfmpegPath(ffmpegStatic);

const inputUrl = 'https://campaign.salla.media/campaign_media/snapchat/21vFM1Q8AP1Jh5IMDs1Z7DQFPNsyxittSLzfvfqI.mp4';
const localInputPath = path.join(__dirname, 'media.mp4');
const outputDir = path.join(__dirname, 'public', 'chunks');

// Function to download the media file locally
async function downloadMedia(url, filePath) {
  const writer = fs.createWriteStream(filePath);

  const response = await axios({
    url,
    method: 'GET',
    responseType: 'stream'
  });

  response.data.pipe(writer);

  return new Promise((resolve, reject) => {
    writer.on('finish', resolve);
    writer.on('error', reject);
  });
}

app.get('/', async (req, res) => {
  try {
    // Download the video to a local file
    console.log('Downloading video...');
    await downloadMedia(inputUrl, localInputPath);
    console.log('Download complete.');

    // Ensure the output directory exists
    if (!fs.existsSync(outputDir)) {
      fs.mkdirSync(outputDir, { recursive: true });
    }

    // Chunk the video into 10-second segments
    console.log('Chunking video...');
    ffmpeg(localInputPath)
      .output(`${outputDir}/chunk_%03d.mp4`) // Create chunk files like chunk_001.mp4, chunk_002.mp4
      .videoCodec('libx264')                 // Convert to H.264
      .audioCodec('aac')                     // Convert audio to AAC
      .format('segment')                     // Segment the video
      .outputOptions('-segment_time', '10')  // Set segment time to 10 seconds
      .on('end', () => {
        console.log('Chunking complete.');
        res.send('Video chunked into 10-second segments successfully!');
      })
      .on('error', (err) => {
        console.error('Error during chunking:', err.message);
        res.status(500).send('Error during chunking.');
      })
      .run();
  } catch (err) {
    console.error('Error:', err.message);
    res.status(500).send('Error during processing.');
  }
});

app.listen(port, () => {
  console.log(`Example app listening on port ${port}`);
});



this code working on video create chunk accound to size 


const express = require('express');
const app = express();
const port = 9999;
const axios = require('axios');
const fs = require('fs');
const path = require('path');
const ffmpegStatic = require('ffmpeg-static');
const ffmpeg = require('fluent-ffmpeg');

// Set the path to the ffmpeg binary
ffmpeg.setFfmpegPath(ffmpegStatic);

const inputUrl = 'https://campaign.salla.media/campaign_media/snapchat/21vFM1Q8AP1Jh5IMDs1Z7DQFPNsyxittSLzfvfqI.mp4';
const localInputPath = path.join(__dirname, 'media.mp4');
const outputDir = path.join(__dirname, 'public', 'chunks');

// Function to download the media file locally
async function downloadMedia(url, filePath) {
  const writer = fs.createWriteStream(filePath);

  const response = await axios({
    url,
    method: 'GET',
    responseType: 'stream'
  });

  response.data.pipe(writer);

  return new Promise((resolve, reject) => {
    writer.on('finish', resolve);
    writer.on('error', reject);
  });
}

app.get('/', async (req, res) => {
  try {
    // Download the video to a local file
    console.log('Downloading video...');
    await downloadMedia(inputUrl, localInputPath);
    console.log('Download complete.');

    // Ensure the output directory exists
    if (!fs.existsSync(outputDir)) {
      fs.mkdirSync(outputDir, { recursive: true });
    }

    // Chunk the video by file size (10 MB)
    console.log('Chunking video...');
    ffmpeg(localInputPath)
      .output(`${outputDir}/chunk_%03d.mp4`)  // Create chunk files like chunk_001.mp4, chunk_002.mp4
      .videoCodec('libx264')                  // Convert to H.264
      .audioCodec('aac')                      // Convert audio to AAC
      .outputOptions('-fs', '10M')            // Set file size limit to 10 MB per chunk
      .on('end', () => {
        console.log('Chunking complete.');
        res.send('Video chunked into 10 MB segments successfully!');
      })
      .on('error', (err) => {
        console.error('Error during chunking:', err.message);
        res.status(500).send('Error during chunking.');
      })
      .run();
  } catch (err) {
    console.error('Error:', err.message);
    res.status(500).send('Error during processing.');
  }
});

app.listen(port, () => {
  console.log(`Example app listening on port ${port}`);
});





last code 

const axios = require('axios');
const fs = require('fs');
const ffmpeg = require('fluent-ffmpeg');

// Function to download media
const downloadMedia = async (url, downloadPath) => {
  const writer = fs.createWriteStream(downloadPath);
  
  const response = await axios({
    url,
    method: 'GET',
    responseType: 'stream',
  });

  response.data.pipe(writer);

  return new Promise((resolve, reject) => {
    writer.on('finish', resolve);
    writer.on('error', reject);
  });
};

// Function to convert video to H.264 codec
const convertToH264 = (inputFile, outputFile) => {
  return new Promise((resolve, reject) => {
    ffmpeg(inputFile)
      .videoCodec('libx264') // Set codec to H.264
      .output(outputFile)
      .on('end', resolve)
      .on('error', reject)
      .run();
  });
};

// Function to split video into chunks
const splitVideoIntoChunks = (inputFile, chunkDuration, outputPattern) => {
  return new Promise((resolve, reject) => {
    ffmpeg(inputFile)
      .outputOptions('-f', 'segment') // Segment mode
      .outputOptions(`-segment_time ${chunkDuration}`) // Set chunk duration
      .outputOptions('-reset_timestamps 1') // Reset timestamps for each chunk
      .output(outputPattern)
      .on('end', resolve)
      .on('error', reject)
      .run();
  });
};

// Main function to download, convert, and chunk video
const processMedia = async () => {
  const mediaUrl = 'https://example.com/sample-video.mp4'; // replace with actual media URL
  const downloadPath = 'media/original.mp4';
  const convertedPath = 'media/converted_h264.mp4';
  const chunkPattern = 'media/chunks/output_%03d.mp4'; // Output pattern for chunks
  const chunkDuration = 10; // Chunk duration in seconds

  try {
    console.log('Downloading media...');
    await downloadMedia(mediaUrl, downloadPath);
    console.log('Media downloaded successfully.');

    console.log('Converting video to H.264...');
    await convertToH264(downloadPath, convertedPath);
    console.log('Video converted to H.264 successfully.');

    console.log('Splitting video into chunks...');
    await splitVideoIntoChunks(convertedPath, chunkDuration, chunkPattern);
    console.log('Video split into chunks successfully.');

  } catch (error) {
    console.error('Error processing media:', error);
  }
};

processMedia();
